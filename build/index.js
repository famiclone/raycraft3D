(()=>{"use strict";const t=[{id:0,name:"First level",map:[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,3,0,3,0,0,1,1,1,2,1,1,1,1,1,2,1,1,1,2,1,0,0,0,0,0,0,0,0,1],[1,0,0,3,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1],[1,0,0,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,3,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],[1,0,0,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],[1,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,3,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1],[1,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,4,0,0,4,2,0,2,2,2,2,2,2,2,2,0,2,4,4,0,0,4,0,0,0,0,0,0,0,1],[1,0,0,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,0,0,0,0,0,0,0,1],[1,0,0,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,0,0,0,0,0,0,0,1],[1,0,0,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,0,0,0,0,0,0,0,1],[1,0,0,4,3,3,4,2,2,2,2,2,2,2,2,2,2,2,2,2,4,3,3,4,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]]}];class e{constructor(t){this.id=t,this.pos={x:0,y:0},this.speed=0,this.moveSpeed=0,this.rotation=0,this.direction=0,this.rotationSpeed=0}}class i extends e{constructor(t){super(t),this.id=t,this.pos={x:16,y:10},this.speed=0,this.moveSpeed=.018,this.rotation=0,this.direction=0,this.rotationSpeed=6*Math.PI/1800}}class s{constructor(){this.stripWidth=2,this.screenStrips=[],this.screen=document.createElement("div"),this.width=640,this.height=480,this.screen.id="screen",document.body.prepend(this.screen),this.init()}init(){const t=document.createElement("div");t.id="floor";const e=document.createElement("div");e.id="ceiling";const i=document.createElement("div");i.id="level";const s=document.createElement("div");s.id="hand",this.screen.appendChild(t),this.screen.appendChild(e),this.screen.appendChild(i),this.screen.appendChild(s);for(let t=0;t<this.width;t+=this.stripWidth){const e=document.createElement("div");e.style.position="absolute",e.style.left=t+"px",e.style.width=this.stripWidth+"px",e.style.height="0px",e.style.overflow="hidden",e.style.backgroundColor="magenta";const s=new Image;s.src="public/walls.png",s.style.position="absolute",s.style.left="0px",e.appendChild(s),e.img=s,this.screenStrips.push(e),i.appendChild(e)}}drawRay(){}castSingleRay(){}drawMiniMap(){}updateMiniMap(){}}var a;!function(t){t[t.Playing=0]="Playing",t[t.GameOver=1]="GameOver",t[t.Paused=2]="Paused",t[t.Inventory=3]="Inventory",t[t.Trading=4]="Trading",t[t.MainMenu=5]="MainMenu"}(a||(a={}));const h=document.querySelector("#miniMap"),o=document.querySelector("#miniMapObjects");let r=0;const n=60*Math.PI/180/2,l=Math.ceil(160),p=160/Math.tan(n),d=2*Math.PI,y=document.querySelector("#debugScreen");const c=new class{constructor(){this.state="mainmenu",this.mapWidth=0,this.mapHeight=0,this.drawMiniMap=()=>{h.width=8*this.mapWidth,h.height=8*this.mapHeight,h.style.width=8*this.mapWidth+"px";const t=h.getContext("2d");for(let e=0;e<this.mapHeight;e++)for(let i=0;i<this.mapWidth;i++)this.level.map[e][i]>0&&(t.fillStyle="black",t.fillRect(8*i,8*e,8,8))},this.updateMiniMap=()=>{o.width=8*this.mapWidth,o.height=8*this.mapHeight;const t=o.getContext("2d");t.clearRect(0,0,h.width,h.height),t.fillStyle="yellowgreen",t.fillRect(8*this.player.pos.x-2,8*this.player.pos.y-2,4,4),t.beginPath(),t.moveTo(8*this.player.pos.x,8*this.player.pos.y),t.lineTo(8*(this.player.pos.x+4*Math.cos(this.player.rotation)),8*(this.player.pos.y+4*Math.sin(this.player.rotation))),t.closePath(),t.stroke()},this.player=new i("player"),this.renderer=new s,this.state="mainmenu",this.level=t[0],this.setup()}castRays(){let t=0;for(let e=0;e<l;e++){const i=2*(-l/2+e),s=Math.sqrt(i*i+p*p),a=Math.asin(i/s);this.castSingleRay(this.player.rotation+a,t++)}}castSingleRay(t,e){(t%=d)<0&&(t+=d);for(var i=t>.75*d||t<.25*d,s=t<0||t>Math.PI,a=0,h=Math.sin(t),o=Math.cos(t),r=0,n=0,l=0,y=0,c=i?1:-1,m=c*(f=h/o),u=i?Math.ceil(this.player.pos.x):Math.floor(this.player.pos.x),M=this.player.pos.y+(u-this.player.pos.x)*f;u>=0&&u<this.mapWidth&&M>=0&&M<this.mapHeight;){var g=Math.floor(u+(i?0:-1)),v=Math.floor(M);if(this.level.map[v][g]>0){r=(S=u-this.player.pos.x)*S+(b=M-this.player.pos.y)*b,a=this.level.map[v][g],y=M%1,i||(y=1-y),n=u,l=M,!0;break}u+=c,M+=m}var f,w=s?-1:1,x=w*(f=o/h);for(M=s?Math.floor(this.player.pos.y):Math.ceil(this.player.pos.y),u=this.player.pos.x+(M-this.player.pos.y)*f;u>=0&&u<this.mapWidth&&M>=0&&M<this.mapHeight;){g=Math.floor(M+(i?0:-1)),v=M>>0;if(this.level.map[v][g]>0){var S,b,P=(S=u-this.player.pos.x)*S+(b=M-this.player.pos.y)*b;(!r||P<r)&&(r=P,n=u,l=M,a=this.level.map[v][g],y=u%1,s&&(y=1-y));break}u+=x,M+=w}if(r){this.drawRay(n,l);var k=this.renderer.screenStrips[e];r=Math.sqrt(r),r*=Math.cos(this.player.rotation-t);var W=Math.round(p/r),R=2*W,C=Math.round((200-W)/2);k.style.height=W+"px",k.style.top=C+"px",k.img.style.height=Math.floor(4*W)+"px",k.img.style.width=Math.floor(2*R)+"px",k.img.style.top=-Math.floor(W*(a-1))+"px";var E=Math.round(y*R);E>R-2&&(E=R-2),k.img.style.left=-E+"px"}}bindKeys(){const t=document.querySelector("#hand");document.addEventListener("keydown",(e=>{switch(e.code){case"KeyW":this.player.speed=1,t.style.animation="walk 1.5s infinite";break;case"KeyS":this.player.speed=-1,t.style.animation="walk 1.5s infinite";break;case"KeyA":this.player.direction=-1,t.style.animation="walk 1.5s infinite";break;case"KeyD":this.player.direction=1,t.style.animation="walk 1.5s infinite"}})),document.addEventListener("keyup",(e=>{switch(e.code){case"KeyW":case"KeyS":this.player.speed=0,t.style.animation="";break;case"KeyA":case"KeyD":this.player.direction=0,t.style.animation=""}}))}drawRay(t,e){var i=document.querySelector("#miniMapObjects").getContext("2d");i.strokeStyle="rgba(0,100,0,0.3)",i.lineWidth=.5,i.beginPath(),i.moveTo(8*this.player.pos.x,8*this.player.pos.y),i.lineTo(8*t,8*e),i.closePath(),i.stroke()}setup(){const t=document.querySelector("canvas");t.width=160,t.height=120,this.mapWidth=this.level.map[0].length,this.mapHeight=this.level.map.length,this.bindKeys(),this.drawMiniMap(),this.loop(0)}isBlocking(t,e){return e<0||e>=this.mapHeight||t<0||t>=this.mapWidth||0!==this.level.map[Math.floor(e)][Math.floor(t)]}movePlayer(){const t=this.player.moveSpeed*this.player.speed;this.player.rotation+=this.player.direction*this.player.rotationSpeed;const e=this.player.pos.x+Math.cos(this.player.rotation)*t,i=this.player.pos.y+Math.sin(this.player.rotation)*t;this.isBlocking(e,i)?console.log("is collide"):(this.player.pos.x=e,this.player.pos.y=i,this.player.rotation+=this.player.direction*this.player.rotationSpeed,this.player.rotation<0&&(this.player.rotation+=2*Math.PI),this.player.rotation>=2*Math.PI&&(this.player.rotation-=2*Math.PI))}update(t){this.movePlayer(),this.updateMiniMap(),this.castRays(),y.innerText=`\n      FPS: ${Math.round(1/t)}\n      PLAYER X: ${this.player.pos.x}\n      PLAYER Y: ${this.player.pos.y}\n      DT: ${t}\n    `}loop(t){const e=r-t;r=t,this.update(e),requestAnimationFrame(this.loop.bind(this))}};window.game=c,c.setup()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,