(()=>{"use strict";const t=[{id:0,name:"First level",map:[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,3,0,3,0,0,1,1,1,2,1,1,1,1,1,2,1,1,1,2,1,0,0,0,0,0,0,0,0,1],[1,0,0,3,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1],[1,0,0,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,3,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],[1,0,0,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],[1,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,3,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1],[1,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,4,0,0,4,2,0,2,2,2,2,2,2,2,2,0,2,4,4,0,0,4,0,0,0,0,0,0,0,1],[1,0,0,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,0,0,0,0,0,0,0,1],[1,0,0,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,0,0,0,0,0,0,0,1],[1,0,0,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,0,0,0,0,0,0,0,1],[1,0,0,4,3,3,4,2,2,2,2,2,2,2,2,2,2,2,2,2,4,3,3,4,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]]}];class e{constructor(t){this.id=t,this.pos={x:0,y:0},this.speed=0,this.moveSpeed=0,this.rotation=0,this.direction={x:0,y:0},this.rotationSpeed=0}}class i extends e{constructor(t){super(t),this.isStrafing=!1,this.id=t,this.pos={x:16,y:10},this.speed=0,this.moveSpeed=.05,this.rotation=0,this.direction={x:0,y:0},this.rotationSpeed=6*Math.PI/360}}class s{constructor(t,e){this._canvas=document.createElement("canvas"),this._canvas.width=t,this._canvas.height=e,this._canvas.style.position="absolute",this._canvas.style.top="0",this._canvas.style.left="0",this._canvas.id="hud",this._ctx=this._canvas.getContext("2d"),this.renderCrosshair()}get canvas(){return this._canvas}get ctx(){return this._ctx}renderCrosshair(){this._ctx.beginPath(),this._ctx.moveTo(this.canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2+10,this._canvas.height/2),this._ctx.moveTo(this._canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2-10,this._canvas.height/2),this._ctx.moveTo(this._canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2,this._canvas.height/2+10),this._ctx.moveTo(this._canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2,this._canvas.height/2-10),this._ctx.strokeStyle="red",this._ctx.stroke()}}class a{constructor(){this.stripWidth=2,this.screenStrips=[],this.screen=document.createElement("div"),this.width=320,this.height=200,this.screen.id="screen",this.skybox=document.createElement("div"),this.skybox.style.backgroundPosition="center",document.body.prepend(this.screen),this.init()}init(){document.body.style.cursor="none";const t=new s(this.width,this.height),e=document.createElement("div");e.id="floor",this.skybox.id="ceiling";const i=document.createElement("div");i.id="level";const a=document.createElement("div");a.id="hand",this.screen.appendChild(e),this.screen.appendChild(this.skybox),this.screen.appendChild(i),this.screen.appendChild(a),this.screen.appendChild(t.canvas);for(let t=0;t<this.width;t+=this.stripWidth){const e=document.createElement("div");e.style.position="absolute",e.style.left=t+"px",e.style.width=this.stripWidth+"px",e.style.height="0px",e.style.overflow="hidden",e.style.backgroundColor="magenta";const s=new Image;s.src="public/walls.png",s.style.position="absolute",s.style.left="0px",e.appendChild(s),e.img=s,this.screenStrips.push(e),i.appendChild(e)}}drawRay(){}castSingleRay(){}drawMiniMap(){}updateMiniMap(){}}var h;!function(t){t[t.Playing=0]="Playing",t[t.GameOver=1]="GameOver",t[t.Paused=2]="Paused",t[t.Inventory=3]="Inventory",t[t.Trading=4]="Trading",t[t.MainMenu=5]="MainMenu"}(h||(h={}));const n=document.querySelector("#miniMap"),o=document.querySelector("#miniMapObjects");let r=0;const l=60*Math.PI/180/2,p=Math.ceil(160),c=160/Math.tan(l),d=2*Math.PI;let y=[],m=0,v=[],g=[],u=[];const x=document.querySelector("#debugScreen");const M=new class{constructor(){this.state="mainmenu",this.mapWidth=0,this.mapHeight=0,this.dayTime=0,this.drawMiniMap=()=>{n.width=8*this.mapWidth,n.height=8*this.mapHeight,n.style.width=8*this.mapWidth+"px";const t=n.getContext("2d");for(let e=0;e<this.mapHeight;e++)for(let i=0;i<this.mapWidth;i++)this.level.map[e][i]>0&&(t.fillStyle="black",t.fillRect(8*i,8*e,8,8))},this.updateMiniMap=()=>{o.width=8*this.mapWidth,o.height=8*this.mapHeight;const t=o.getContext("2d");t.clearRect(0,0,n.width,n.height),t.fillStyle="yellowgreen",t.fillRect(8*this.player.pos.x-2,8*this.player.pos.y-2,4,4),t.beginPath(),t.moveTo(8*this.player.pos.x,8*this.player.pos.y),t.lineTo(8*(this.player.pos.x+4*Math.cos(this.player.rotation)),8*(this.player.pos.y+4*Math.sin(this.player.rotation))),t.closePath(),t.stroke()},this.player=new i("player"),this.renderer=new a,this.state="mainmenu",this.level=t[0],this.setup()}initSprites(){v=[];for(var t=0;t<this.level.map.length;t++)v[t]=[];for(var e=0;e<g.length;e++){var i=g[e],s=u[i.type],a=document.createElement("img");a.src=s.img,a.style.display="none",a.style.position="absolute",i.visible=!1,i.block=s.block,i.img=a,v[i.y][i.x]=i,this.renderer.screen.appendChild(a)}}isBlocking(t,e){if(e<0||e>=this.mapHeight||t<0||t>=this.mapWidth)return!0;var i=Math.floor(t),s=Math.floor(e);return 0!=this.level.map[s][i]||!(!v[s][i]||!v[s][i].block)}checkCollision(t,e,i,s,a){var h={x:t,y:e};if(s<0||s>=this.mapHeight||i<0||i>=this.mapWidth)return h;var n=Math.floor(i),o=Math.floor(s);if(this.isBlocking(n,o))return h;h.x=i,h.y=s;var r,l,p=this.isBlocking(n,o-1),c=this.isBlocking(n,o+1),d=this.isBlocking(n-1,o),y=this.isBlocking(n+1,o);(p&&s-o<a&&(s=h.y=o+a),c&&o+1-s<a&&(s=h.y=o+1-a),d&&i-n<a&&(i=h.x=n+a),y&&n+1-i<a&&(i=h.x=n+1-a),!this.isBlocking(n-1,o-1)||p&&d)||(r=i-n)*r+(l=s-o)*l<a*a&&(r*r>l*l?i=h.x=n+a:s=h.y=o+a);!this.isBlocking(n+1,o-1)||p&&y||(r=i-(n+1))*r+(l=s-o)*l<a*a&&(r*r>l*l?i=h.x=n+1-a:s=h.y=o+a);!this.isBlocking(n-1,o+1)||c&&c||(r=i-n)*r+(l=s-(o+1))*l<a*a&&(r*r>l*l?i=h.x=n+a:s=h.y=o+1-a);!this.isBlocking(n+1,o+1)||c&&y||(r=i-(n+1))*r+(l=s-(o+1))*l<a*a&&(r*r>l*l?i=h.x=n+1-a:s=h.y=o+1-a);return h}castRays(){let t=0;for(let e=0;e<p;e++){const i=2*(-p/2+e),s=Math.sqrt(i*i+c*c),a=Math.asin(i/s);this.castSingleRay(this.player.rotation+a,t++)}}castSingleRay(t,e){(t%=d)<0&&(t+=d);var i=t>.75*d||t<.25*d,s=t<0||t>Math.PI,a=0,h=Math.sin(t),n=Math.cos(t),o=0;let r=0,l=0;var p=0;for(var m=i?1:-1,g=m*(b=h/n),u=i?Math.ceil(this.player.pos.x):Math.floor(this.player.pos.x),x=this.player.pos.y+(u-this.player.pos.x)*b;u>=0&&u<this.mapWidth&&x>=0&&x<this.mapHeight;){var M=u+(i?0:-1),f=x>>0;try{v[f][M]&&!v[f][M].visible&&(v[f][M].visible=!0,y.push(v[f][M]))}catch(t){}if(this.level.map[f][M]>0){let t=u-this.player.pos.x,e=x-this.player.pos.y;o=t*t+e*e,a=this.level.map[f][M],p=x%1,i||(p=1-p),u,x,r=M,l=f,!0;break}u+=m,x+=g}var b,k=s?-1:1,w=k*(b=n/h);for(x=s?Math.floor(this.player.pos.y):Math.ceil(this.player.pos.y),u=this.player.pos.x+(x-this.player.pos.y)*b;u>=0&&u<this.mapWidth&&x>=0&&x<this.mapHeight;){f=Math.floor(x+(s?-1:0)),M=u>>0;try{v[f][M]&&!v[f][M].visible&&(v[f][M].visible=!0,y.push(v[f][M]))}catch(t){}if(this.level.map[f][M]>0){var _=u-this.player.pos.x,S=x-this.player.pos.y,P=_*_+S*S;(!o||P<o)&&(o=P,u,x,l=f,r=M,a=this.level.map[f][M],p=u%1,s&&(p=1-p));break}u+=w,x+=k}if(o){var T=this.renderer.screenStrips[e];o=Math.sqrt(o),o*=Math.cos(this.player.rotation-t);var C=Math.round(c/o),E=2*C,W=Math.round((200-C)/2);let i=C;T.style.height=i+"px",T.style.top=W+"px",T.img.style.height=Math.floor(4*C)+"px",T.img.style.width=Math.floor(2*E)+"px",T.img.style.top=-Math.floor(C*(a-1))+"px";var I=Math.round(p*E);I>E-2&&(I=E-2),T.img.style.left=-I+"px"}}bindKeys(){const t=document.querySelector("#hand");document.addEventListener("mousemove",(t=>{const e=t.clientX-window.innerWidth/2*this.player.rotationSpeed;this.player.rotation=e/320*2*Math.PI})),document.addEventListener("keydown",(e=>{switch(e.code){case"KeyW":this.player.speed=1,this.player.direction.y=-1,t.style.animation="walk 1.5s infinite";break;case"KeyS":this.player.speed=-1,this.player.direction.y=1,t.style.animation="walk 1.5s infinite";break;case"KeyA":this.player.direction.x=1,this.player.speed=-1;break;case"KeyD":this.player.direction.x=-1,this.player.speed=1;break;case"ShiftLeft":this.player.speed*=2}})),document.addEventListener("keyup",(e=>{switch(e.code){case"KeyW":case"KeyS":this.player.speed=0,this.player.direction.y=0,t.style.animation="";break;case"KeyA":case"KeyD":this.player.speed=0,this.player.direction.x=0,t.style.animation="";break;case"ShiftLeft":this.player.speed/=2}}))}setup(){this.mapWidth=this.level.map[0].length,this.mapHeight=this.level.map.length,this.initSprites(),this.bindKeys(),this.drawMiniMap(),document.body.style.imageRendering="pixelated",this.loop(0)}movePlayer(t,e){const i=this.player.moveSpeed*this.player.speed;let s=this.player.pos.x+Math.cos(this.player.rotation)*i,a=this.player.pos.y+Math.sin(this.player.rotation)*i;0!==this.player.direction.x&&(s=this.player.pos.x+Math.cos(this.player.rotation+Math.PI/2)*i,a=this.player.pos.y+Math.sin(this.player.rotation+Math.PI/2)*i);const h=this.checkCollision(this.player.pos.x,this.player.pos.y,s,a,.35);this.player.pos.x=h.x,this.player.pos.y=h.y,this.player.rotation<0&&(this.player.rotation+=2*Math.PI),this.player.rotation>=2*Math.PI&&(this.player.rotation-=2*Math.PI)}render(){this.renderer.skybox.style.backgroundColor=`rgba(\n      (255 / ${this.dayTime}) * 255,\n      (255 / ${this.dayTime}) * 255,\n      (255 / ${this.dayTime}) * 255,\n      1\n    )`}update(t){this.movePlayer(null,t),this.updateMiniMap(),this.castRays(),m+=-t,m>5e3&&(this.dayTime+=1,this.dayTime>23&&(this.dayTime=0),m=0),x.innerText=`\n      FPS: ${Math.round(1/t)}\n      PLAYER X: ${this.player.pos.x}\n      PLAYER Y: ${this.player.pos.y}\n      PLAYER ANGLE: ${this.player.rotation}\n      DT: ${t}\n      TIME: ${this.dayTime.toString().padStart(2,"0")}:00\n    `}loop(t){const e=r-t;r=t,this.update(e),requestAnimationFrame(this.loop.bind(this))}};window.game=M,M.setup()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,