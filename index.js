(()=>{"use strict";const t=[{id:0,name:"First level",map:[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,3,0,3,0,0,1,1,1,2,1,1,1,1,1,2,1,1,1,2,1,0,0,0,0,0,0,0,0,1],[1,0,0,3,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1],[1,0,0,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,3,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],[1,0,0,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],[1,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,3,0,0,0,0,0,0,0,0,0,3,1,1,1,1,1],[1,0,0,0,0,0,0,0,0,3,3,3,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,4,0,0,4,2,0,2,2,2,2,2,2,2,2,0,2,4,4,0,0,4,0,0,0,0,0,0,0,1],[1,0,0,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,0,0,0,0,0,0,0,1],[1,0,0,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,0,0,0,0,0,0,0,1],[1,0,0,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,0,0,0,0,0,0,0,1],[1,0,0,4,3,3,4,2,2,2,2,2,2,2,2,2,2,2,2,2,4,3,3,4,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]]}];class e{constructor(t){this.id=t,this.pos={x:0,y:0},this.speed=0,this.moveSpeed=0,this.rotation=0,this.direction={x:0,y:0},this.rotationSpeed=0}}class i extends e{constructor(t){super(t),this.isStrafing=!1,this.id=t,this.pos={x:16,y:10},this.speed=0,this.moveSpeed=.05,this.rotation=0,this.direction={x:0,y:0},this.rotationSpeed=6*Math.PI/360}}class s{constructor(t,e){this._canvas=document.createElement("canvas"),this._canvas.width=t,this._canvas.height=e,this._canvas.style.position="absolute",this._canvas.style.top="0",this._canvas.style.left="0",this._canvas.id="hud",this._ctx=this._canvas.getContext("2d"),this.renderCrosshair()}get canvas(){return this._canvas}get ctx(){return this._ctx}renderCrosshair(){this._ctx.beginPath(),this._ctx.moveTo(this.canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2+10,this._canvas.height/2),this._ctx.moveTo(this._canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2-10,this._canvas.height/2),this._ctx.moveTo(this._canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2,this._canvas.height/2+10),this._ctx.moveTo(this._canvas.width/2,this._canvas.height/2),this._ctx.lineTo(this._canvas.width/2,this._canvas.height/2-10),this._ctx.strokeStyle="red",this._ctx.stroke()}}class a{constructor(){this.stripWidth=2,this.screenStrips=[],this.screen=document.createElement("div"),this.width=320,this.height=200,this.screen.id="screen",this.skybox=document.createElement("div"),document.body.prepend(this.screen),this.init()}init(){document.body.style.cursor="none";const t=new s(this.width,this.height),e=document.createElement("div");e.id="floor",this.skybox.id="ceiling";const i=document.createElement("div");i.id="level";const a=document.createElement("div");a.id="hand",this.screen.appendChild(e),this.screen.appendChild(this.skybox),this.screen.appendChild(i),this.screen.appendChild(a),this.screen.appendChild(t.canvas);for(let t=0;t<this.width;t+=this.stripWidth){const e=document.createElement("div");e.style.position="absolute",e.style.left=t+"px",e.style.width=this.stripWidth+"px",e.style.height="0px",e.style.overflow="hidden",e.style.backgroundColor="magenta";const s=new Image;s.src="public/walls.png",s.style.position="absolute",s.style.left="0px",e.appendChild(s),e.img=s,this.screenStrips.push(e),i.appendChild(e)}}drawRay(){}castSingleRay(){}drawMiniMap(){}updateMiniMap(){}}var h;!function(t){t[t.Playing=0]="Playing",t[t.GameOver=1]="GameOver",t[t.Paused=2]="Paused",t[t.Inventory=3]="Inventory",t[t.Trading=4]="Trading",t[t.MainMenu=5]="MainMenu"}(h||(h={}));const n=document.querySelector("#miniMap"),r=document.querySelector("#miniMapObjects");let o=0;const l=60*Math.PI/180/2,p=Math.ceil(160),c=160/Math.tan(l),d=2*Math.PI;let y=[],m=0,v=[],g=[],u=[];const x=document.querySelector("#debugScreen");const M=new class{constructor(){this.state="mainmenu",this.mapWidth=0,this.mapHeight=0,this.dayTime=0,this.drawMiniMap=()=>{n.width=8*this.mapWidth,n.height=8*this.mapHeight,n.style.width=8*this.mapWidth+"px";const t=n.getContext("2d");for(let e=0;e<this.mapHeight;e++)for(let i=0;i<this.mapWidth;i++)this.level.map[e][i]>0&&(t.fillStyle="black",t.fillRect(8*i,8*e,8,8))},this.updateMiniMap=()=>{r.width=8*this.mapWidth,r.height=8*this.mapHeight;const t=r.getContext("2d");t.clearRect(0,0,n.width,n.height),t.fillStyle="yellowgreen",t.fillRect(8*this.player.pos.x-2,8*this.player.pos.y-2,4,4),t.beginPath(),t.moveTo(8*this.player.pos.x,8*this.player.pos.y),t.lineTo(8*(this.player.pos.x+4*Math.cos(this.player.rotation)),8*(this.player.pos.y+4*Math.sin(this.player.rotation))),t.closePath(),t.stroke()},this.player=new i("player"),this.renderer=new a,this.state="mainmenu",this.level=t[0],this.setup()}initSprites(){v=[];for(var t=0;t<this.level.map.length;t++)v[t]=[];for(var e=0;e<g.length;e++){var i=g[e],s=u[i.type],a=document.createElement("img");a.src=s.img,a.style.display="none",a.style.position="absolute",i.visible=!1,i.block=s.block,i.img=a,v[i.y][i.x]=i,this.renderer.screen.appendChild(a)}}isBlocking(t,e){if(e<0||e>=this.mapHeight||t<0||t>=this.mapWidth)return!0;var i=Math.floor(t),s=Math.floor(e);return 0!=this.level.map[s][i]||!(!v[s][i]||!v[s][i].block)}checkCollision(t,e,i,s,a){var h={x:t,y:e};if(s<0||s>=this.mapHeight||i<0||i>=this.mapWidth)return h;var n=Math.floor(i),r=Math.floor(s);if(this.isBlocking(n,r))return h;h.x=i,h.y=s;var o,l,p=this.isBlocking(n,r-1),c=this.isBlocking(n,r+1),d=this.isBlocking(n-1,r),y=this.isBlocking(n+1,r);(p&&s-r<a&&(s=h.y=r+a),c&&r+1-s<a&&(s=h.y=r+1-a),d&&i-n<a&&(i=h.x=n+a),y&&n+1-i<a&&(i=h.x=n+1-a),!this.isBlocking(n-1,r-1)||p&&d)||(o=i-n)*o+(l=s-r)*l<a*a&&(o*o>l*l?i=h.x=n+a:s=h.y=r+a);!this.isBlocking(n+1,r-1)||p&&y||(o=i-(n+1))*o+(l=s-r)*l<a*a&&(o*o>l*l?i=h.x=n+1-a:s=h.y=r+a);!this.isBlocking(n-1,r+1)||c&&c||(o=i-n)*o+(l=s-(r+1))*l<a*a&&(o*o>l*l?i=h.x=n+a:s=h.y=r+1-a);!this.isBlocking(n+1,r+1)||c&&y||(o=i-(n+1))*o+(l=s-(r+1))*l<a*a&&(o*o>l*l?i=h.x=n+1-a:s=h.y=r+1-a);return h}castRays(){let t=0;for(let e=0;e<p;e++){const i=2*(-p/2+e),s=Math.sqrt(i*i+c*c),a=Math.asin(i/s);this.castSingleRay(this.player.rotation+a,t++)}}castSingleRay(t,e){(t%=d)<0&&(t+=d);var i=t>.75*d||t<.25*d,s=t<0||t>Math.PI,a=0,h=Math.sin(t),n=Math.cos(t),r=0;let o=0,l=0;var p=0;for(var m=i?1:-1,g=m*(f=h/n),u=i?Math.ceil(this.player.pos.x):Math.floor(this.player.pos.x),x=this.player.pos.y+(u-this.player.pos.x)*f;u>=0&&u<this.mapWidth&&x>=0&&x<this.mapHeight;){var M=u+(i?0:-1),b=x>>0;try{v[b][M]&&!v[b][M].visible&&(v[b][M].visible=!0,y.push(v[b][M]))}catch(t){}if(this.level.map[b][M]>0){let t=u-this.player.pos.x,e=x-this.player.pos.y;r=t*t+e*e,a=this.level.map[b][M],p=x%1,i||(p=1-p),u,x,o=M,l=b,!0;break}u+=m,x+=g}var f,k=s?-1:1,w=k*(f=n/h);for(x=s?Math.floor(this.player.pos.y):Math.ceil(this.player.pos.y),u=this.player.pos.x+(x-this.player.pos.y)*f;u>=0&&u<this.mapWidth&&x>=0&&x<this.mapHeight;){b=Math.floor(x+(s?-1:0)),M=u>>0;try{v[b][M]&&!v[b][M].visible&&(v[b][M].visible=!0,y.push(v[b][M]))}catch(t){}if(this.level.map[b][M]>0){var _=u-this.player.pos.x,S=x-this.player.pos.y,T=_*_+S*S;(!r||T<r)&&(r=T,u,x,l=b,o=M,a=this.level.map[b][M],p=u%1,s&&(p=1-p));break}u+=w,x+=k}if(r){var P=this.renderer.screenStrips[e];r=Math.sqrt(r),r*=Math.cos(this.player.rotation-t);var C=Math.round(c/r),W=2*C,E=Math.round((200-C)/2);let i=C;P.style.height=i+"px",P.style.top=E+"px",P.img.style.height=Math.floor(4*C)+"px",P.img.style.width=Math.floor(2*W)+"px",P.img.style.top=-Math.floor(C*(a-1))+"px";var I=Math.round(p*W);I>W-2&&(I=W-2),P.img.style.left=-I+"px"}}bindKeys(){const t=document.querySelector("#hand");document.addEventListener("mousemove",(t=>{const e=t.clientX-window.innerWidth/2*this.player.rotationSpeed;this.player.rotation=e/320*2*Math.PI})),document.addEventListener("keydown",(e=>{switch(e.code){case"KeyW":this.player.speed=1,this.player.direction.y=-1,t.style.animation="walk 1.5s infinite";break;case"KeyS":this.player.speed=-1,this.player.direction.y=1,t.style.animation="walk 1.5s infinite";break;case"KeyA":this.player.direction.x=1,this.player.speed=-1;break;case"KeyD":this.player.direction.x=-1,this.player.speed=1;break;case"ShiftLeft":this.player.speed*=2}})),document.addEventListener("keyup",(e=>{switch(e.code){case"KeyW":case"KeyS":this.player.speed=0,this.player.direction.y=0,t.style.animation="";break;case"KeyA":case"KeyD":this.player.speed=0,this.player.direction.x=0,t.style.animation="";break;case"ShiftLeft":this.player.speed/=2}}))}setup(){this.mapWidth=this.level.map[0].length,this.mapHeight=this.level.map.length,this.initSprites(),this.bindKeys(),this.drawMiniMap(),document.body.style.imageRendering="pixelated",this.loop(0)}movePlayer(t,e){const i=this.player.moveSpeed*this.player.speed;let s=this.player.pos.x+Math.cos(this.player.rotation)*i,a=this.player.pos.y+Math.sin(this.player.rotation)*i;0!==this.player.direction.x&&(s=this.player.pos.x+Math.cos(this.player.rotation+Math.PI/2)*i,a=this.player.pos.y+Math.sin(this.player.rotation+Math.PI/2)*i);const h=this.checkCollision(this.player.pos.x,this.player.pos.y,s,a,.35);this.player.pos.x=h.x,this.player.pos.y=h.y,this.player.rotation<0&&(this.player.rotation+=2*Math.PI),this.player.rotation>=2*Math.PI&&(this.player.rotation-=2*Math.PI)}render(){this.dayTime<12?this.renderer.skybox.style.backgroundColor=`rgba(${99/(12/this.dayTime)}, \n    ${155/(12/this.dayTime)},\n    ${255/(12/this.dayTime)}\n    , 1)`:this.renderer.skybox.style.backgroundColor=`rgba(${99/(12/(24-this.dayTime))}, \n      ${155/(12/(24-this.dayTime))},\n      ${255/(12/(24-this.dayTime))}\n      , 1)`}update(t){this.movePlayer(null,t),this.updateMiniMap(),this.castRays(),m+=-t,m>100&&(this.dayTime+=.01,this.dayTime>23&&(this.dayTime=0),m=0),x.innerText=`\n      PLAYER X: ${this.player.pos.x}\n      PLAYER Y: ${this.player.pos.y}\n      PLAYER ANGLE: ${this.player.rotation}\n      DT: ${t}\n    `}loop(t){const e=o-t;o=t,this.update(e),this.render(),requestAnimationFrame(this.loop.bind(this))}};window.game=M,M.setup()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJtYXBwaW5ncyI6Im1CQUFBLE1Ba0NBLEVBbENlLENBQ2IsQ0FDRSxHQUFNLEVBQ04sS0FBUSxjQUVSLElBQU8sQ0FDTCxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FDL0QsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQy9ELENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUMvRCxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FDL0QsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQy9ELENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUMvRCxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FDL0QsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQy9ELENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUMvRCxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FDL0QsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQy9ELENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUMvRCxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FDL0QsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQy9ELENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUMvRCxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FDL0QsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQy9ELENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUMvRCxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FDL0QsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQy9ELENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUMvRCxDQUFDLEVBQUUsRUFB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SyxNQUN6QyxHQzliSnVKLE9BQU96RSxLQUFPQSxFQUNkQSxFQUFLYyxPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWluZWNyYWZ0MjVkLy4vc3JjL2xldmVscy5qcyIsIndlYnBhY2s6Ly9taW5lY3JhZnQyNWQvLi9zcmMvcGVyc29uLnRzIiwid2VicGFjazovL21pbmVjcmFmdDI1ZC8uL3NyYy9wbGF5ZXIudHMiLCJ3ZWJwYWNrOi8vbWluZWNyYWZ0MjVkLy4vc3JjL3JlbmRlcmVyLnRzIiwid2VicGFjazovL21pbmVjcmFmdDI1ZC8uL3NyYy9nYW1lLnRzIiwid2VicGFjazovL21pbmVjcmFmdDI1ZC8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBsZXZlbHMgPSBbXG4gIHtcbiAgICBcImlkXCI6IDAsXG4gICAgXCJuYW1lXCI6IFwiRmlyc3QgbGV2ZWxcIixcbiAgICAvL3ByZXR0aWVyLWlnbm9yZVxuICAgIFwibWFwXCI6IFtcbiAgICAgIFsxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDFdLFxuICAgICAgWzEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMV0sXG4gICAgICBbMSwwLDAsMywzLDMsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwxXSxcbiAgICAgIFsxLDAsMCwzLDAsMywwLDAsMSwxLDEsMiwxLDEsMSwxLDEsMiwxLDEsMSwyLDEsMCwwLDAsMCwwLDAsMCwwLDFdLFxuICAgICAgWzEsMCwwLDMsMCw0LDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMV0sXG4gICAgICBbMSwwLDAsMCwwLDMsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwxXSxcbiAgICAgIFsxLDAsMCwwLDAsMywwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMywxLDEsMSwxLDFdLFxuICAgICAgWzEsMCwwLDMsMCwzLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMV0sXG4gICAgICBbMSwwLDAsMywwLDQsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyXSxcbiAgICAgIFsxLDAsMCwzLDAsMywwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDFdLFxuICAgICAgWzEsMCwwLDMsMywzLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwzLDEsMSwxLDEsMV0sXG4gICAgICBbMSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwxXSxcbiAgICAgIFsxLDAsMCwwLDAsMCwwLDAsMCwzLDMsMywwLDAsMywzLDMsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDJdLFxuICAgICAgWzEsMCwwLDAsMCwwLDAsMCwwLDMsMywzLDAsMCwzLDMsMywwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMV0sXG4gICAgICBbMSwwLDAsMCwwLDAsMCwwLDAsMywzLDMsMCwwLDMsMywzLDAsMCwwLDAsMCwwLDAsMCwwLDMsMSwxLDEsMSwxXSxcbiAgICAgIFsxLDAsMCwwLDAsMCwwLDAsMCwzLDMsMywwLDAsMywzLDMsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDFdLFxuICAgICAgWzEsMCwwLDQsMCwwLDQsMiwwLDIsMiwyLDIsMiwyLDIsMiwwLDIsNCw0LDAsMCw0LDAsMCwwLDAsMCwwLDAsMV0sXG4gICAgICBbMSwwLDAsNCwwLDAsNCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDQsMCwwLDQsMCwwLDAsMCwwLDAsMCwxXSxcbiAgICAgIFsxLDAsMCw0LDAsMCw0LDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsNCwwLDAsNCwwLDAsMCwwLDAsMCwwLDFdLFxuICAgICAgWzEsMCwwLDQsMCwwLDQsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw0LDAsMCw0LDAsMCwwLDAsMCwwLDAsMV0sXG4gICAgICBbMSwwLDAsNCwzLDMsNCwyLDIsMiwyLDIsMiwyLDIsMiwyLDIsMiwyLDQsMywzLDQsMCwwLDAsMCwwLDAsMCwxXSxcbiAgICAgIFsxLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDFdLFxuICAgICAgWzEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMV0sXG4gICAgICBbMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxXVxuICAgIF1cbiAgfVxuXVxuXG5leHBvcnQgZGVmYXVsdCBsZXZlbHM7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQZXJzb24ge1xuICAgIGNvbnN0cnVjdG9yKGlkKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5wb3MgPSB7IHg6IDAsIHk6IDAgfTtcbiAgICAgICAgdGhpcy5zcGVlZCA9IDA7XG4gICAgICAgIHRoaXMubW92ZVNwZWVkID0gMDtcbiAgICAgICAgdGhpcy5yb3RhdGlvbiA9IDA7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIHRoaXMucm90YXRpb25TcGVlZCA9IDA7XG4gICAgfVxufVxuIiwiaW1wb3J0IFBlcnNvbiBmcm9tIFwiLi9wZXJzb25cIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYXllciBleHRlbmRzIFBlcnNvbiB7XG4gICAgY29uc3RydWN0b3IoaWQpIHtcbiAgICAgICAgc3VwZXIoaWQpO1xuICAgICAgICB0aGlzLmlzU3RyYWZpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnBvcyA9IHsgeDogMTYsIHk6IDEwIH07XG4gICAgICAgIHRoaXMuc3BlZWQgPSAwO1xuICAgICAgICB0aGlzLm1vdmVTcGVlZCA9IDAuMDU7XG4gICAgICAgIHRoaXMucm90YXRpb24gPSAwO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IHsgeDogMCwgeTogMCB9O1xuICAgICAgICB0aGlzLnJvdGF0aW9uU3BlZWQgPSAoNiAqIE1hdGguUEkpIC8gMzYwO1xuICAgIH1cbn1cbiIsImNsYXNzIEhVRCB7XG4gICAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCkge1xuICAgICAgICB0aGlzLl9jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgICAgICB0aGlzLl9jYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5fY2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5fY2FudmFzLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICB0aGlzLl9jYW52YXMuc3R5bGUudG9wID0gXCIwXCI7XG4gICAgICAgIHRoaXMuX2NhbnZhcy5zdHlsZS5sZWZ0ID0gXCIwXCI7XG4gICAgICAgIHRoaXMuX2NhbnZhcy5pZCA9IFwiaHVkXCI7XG4gICAgICAgIHRoaXMuX2N0eCA9IHRoaXMuX2NhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICAgIHRoaXMucmVuZGVyQ3Jvc3NoYWlyKCk7XG4gICAgfVxuICAgIGdldCBjYW52YXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gICAgfVxuICAgIGdldCBjdHgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jdHg7XG4gICAgfVxuICAgIHJlbmRlckNyb3NzaGFpcigpIHtcbiAgICAgICAgdGhpcy5fY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICB0aGlzLl9jdHgubW92ZVRvKHRoaXMuY2FudmFzLndpZHRoIC8gMiwgdGhpcy5fY2FudmFzLmhlaWdodCAvIDIpO1xuICAgICAgICB0aGlzLl9jdHgubGluZVRvKHRoaXMuX2NhbnZhcy53aWR0aCAvIDIgKyAxMCwgdGhpcy5fY2FudmFzLmhlaWdodCAvIDIpO1xuICAgICAgICB0aGlzLl9jdHgubW92ZVRvKHRoaXMuX2NhbnZhcy53aWR0aCAvIDIsIHRoaXMuX2NhbnZhcy5oZWlnaHQgLyAyKTtcbiAgICAgICAgdGhpcy5fY3R4LmxpbmVUbyh0aGlzLl9jYW52YXMud2lkdGggLyAyIC0gMTAsIHRoaXMuX2NhbnZhcy5oZWlnaHQgLyAyKTtcbiAgICAgICAgdGhpcy5fY3R4Lm1vdmVUbyh0aGlzLl9jYW52YXMud2lkdGggLyAyLCB0aGlzLl9jYW52YXMuaGVpZ2h0IC8gMik7XG4gICAgICAgIHRoaXMuX2N0eC5saW5lVG8odGhpcy5fY2FudmFzLndpZHRoIC8gMiwgdGhpcy5fY2FudmFzLmhlaWdodCAvIDIgKyAxMCk7XG4gICAgICAgIHRoaXMuX2N0eC5tb3ZlVG8odGhpcy5fY2FudmFzLndpZHRoIC8gMiwgdGhpcy5fY2FudmFzLmhlaWdodCAvIDIpO1xuICAgICAgICB0aGlzLl9jdHgubGluZVRvKHRoaXMuX2NhbnZhcy53aWR0aCAvIDIsIHRoaXMuX2NhbnZhcy5oZWlnaHQgLyAyIC0gMTApO1xuICAgICAgICB0aGlzLl9jdHguc3Ryb2tlU3R5bGUgPSBcInJlZFwiO1xuICAgICAgICB0aGlzLl9jdHguc3Ryb2tlKCk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVuZGVyZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnN0cmlwV2lkdGggPSAyO1xuICAgICAgICB0aGlzLnNjcmVlblN0cmlwcyA9IFtdO1xuICAgICAgICB0aGlzLnNjcmVlbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHRoaXMud2lkdGggPSAzMjA7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gMjAwO1xuICAgICAgICB0aGlzLnNjcmVlbi5pZCA9IFwic2NyZWVuXCI7XG4gICAgICAgIHRoaXMuc2t5Ym94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5wcmVwZW5kKHRoaXMuc2NyZWVuKTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuICAgIGluaXQoKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gXCJub25lXCI7XG4gICAgICAgIGNvbnN0IGh1ZCA9IG5ldyBIVUQodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICBjb25zdCBmbG9vciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGZsb29yLmlkID0gXCJmbG9vclwiO1xuICAgICAgICB0aGlzLnNreWJveC5pZCA9IFwiY2VpbGluZ1wiO1xuICAgICAgICBjb25zdCBsZXZlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGxldmVsLmlkID0gXCJsZXZlbFwiO1xuICAgICAgICBjb25zdCBoYW5kID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgaGFuZC5pZCA9IFwiaGFuZFwiO1xuICAgICAgICB0aGlzLnNjcmVlbi5hcHBlbmRDaGlsZChmbG9vcik7XG4gICAgICAgIHRoaXMuc2NyZWVuLmFwcGVuZENoaWxkKHRoaXMuc2t5Ym94KTtcbiAgICAgICAgdGhpcy5zY3JlZW4uYXBwZW5kQ2hpbGQobGV2ZWwpO1xuICAgICAgICB0aGlzLnNjcmVlbi5hcHBlbmRDaGlsZChoYW5kKTtcbiAgICAgICAgdGhpcy5zY3JlZW4uYXBwZW5kQ2hpbGQoaHVkLmNhbnZhcyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy53aWR0aDsgaSArPSB0aGlzLnN0cmlwV2lkdGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0cmlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIHN0cmlwLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICAgICAgc3RyaXAuc3R5bGUubGVmdCA9IGkgKyBcInB4XCI7XG4gICAgICAgICAgICBzdHJpcC5zdHlsZS53aWR0aCA9IHRoaXMuc3RyaXBXaWR0aCArIFwicHhcIjtcbiAgICAgICAgICAgIHN0cmlwLnN0eWxlLmhlaWdodCA9IFwiMHB4XCI7XG4gICAgICAgICAgICBzdHJpcC5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgICBzdHJpcC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIm1hZ2VudGFcIjtcbiAgICAgICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgICAgaW1nLnNyYyA9IFwicHVibGljL3dhbGxzLnBuZ1wiO1xuICAgICAgICAgICAgaW1nLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICAgICAgaW1nLnN0eWxlLmxlZnQgPSBcIjBweFwiO1xuICAgICAgICAgICAgc3RyaXAuYXBwZW5kQ2hpbGQoaW1nKTtcbiAgICAgICAgICAgIC8vIEFzc2lnbiB0aGUgaW1hZ2UgdG8gYSBwcm9wZXJ0eSBvbiB0aGUgc3RyaXAgZWxlbWVudFxuICAgICAgICAgICAgLy8gc28gd2UgaGF2ZSBlYXN5IGFjY2VzcyB0byB0aGUgaW1hZ2UgbGF0ZXJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHN0cmlwLmltZyA9IGltZztcbiAgICAgICAgICAgIHRoaXMuc2NyZWVuU3RyaXBzLnB1c2goc3RyaXApO1xuICAgICAgICAgICAgbGV2ZWwuYXBwZW5kQ2hpbGQoc3RyaXApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXdSYXkoKSB7IH1cbiAgICBjYXN0U2luZ2xlUmF5KCkgeyB9XG4gICAgZHJhd01pbmlNYXAoKSB7IH1cbiAgICB1cGRhdGVNaW5pTWFwKCkgeyB9XG59XG4iLCIvL0B0cy1pZ25vcmVcbmltcG9ydCBsZXZlbHMgZnJvbSBcIi4vbGV2ZWxzLmpzXCI7XG5pbXBvcnQgUGxheWVyIGZyb20gXCIuL3BsYXllclwiO1xuaW1wb3J0IFJlbmRlcmVyIGZyb20gXCIuL3JlbmRlcmVyXCI7XG52YXIgR2FtZVN0YXRlO1xuKGZ1bmN0aW9uIChHYW1lU3RhdGUpIHtcbiAgICBHYW1lU3RhdGVbR2FtZVN0YXRlW1wiUGxheWluZ1wiXSA9IDBdID0gXCJQbGF5aW5nXCI7XG4gICAgR2FtZVN0YXRlW0dhbWVTdGF0ZVtcIkdhbWVPdmVyXCJdID0gMV0gPSBcIkdhbWVPdmVyXCI7XG4gICAgR2FtZVN0YXRlW0dhbWVTdGF0ZVtcIlBhdXNlZFwiXSA9IDJdID0gXCJQYXVzZWRcIjtcbiAgICBHYW1lU3RhdGVbR2FtZVN0YXRlW1wiSW52ZW50b3J5XCJdID0gM10gPSBcIkludmVudG9yeVwiO1xuICAgIEdhbWVTdGF0ZVtHYW1lU3RhdGVbXCJUcmFkaW5nXCJdID0gNF0gPSBcIlRyYWRpbmdcIjtcbiAgICBHYW1lU3RhdGVbR2FtZVN0YXRlW1wiTWFpbk1lbnVcIl0gPSA1XSA9IFwiTWFpbk1lbnVcIjtcbn0pKEdhbWVTdGF0ZSB8fCAoR2FtZVN0YXRlID0ge30pKTtcbmNvbnN0IG1pbmlNYXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21pbmlNYXBcIik7XG5jb25zdCBtaW5pTWFwT2JqZWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbWluaU1hcE9iamVjdHNcIik7XG5sZXQgbWluaU1hcFNjYWxlID0gODtcbmxldCBsYXN0VGltZSA9IDA7XG5jb25zdCBzY3JlZW5XaWR0aCA9IDMyMDtcbmNvbnN0IHNjcmVlbkhlaWdodCA9IDIwMDtcbmNvbnN0IHN0cmlwV2lkdGggPSAyO1xuY29uc3QgZm92ID0gKDYwICogTWF0aC5QSSkgLyAxODA7XG5jb25zdCBmb3ZIYWxmID0gZm92IC8gMjtcbmNvbnN0IG51bVJheXMgPSBNYXRoLmNlaWwoc2NyZWVuV2lkdGggLyBzdHJpcFdpZHRoKTtcbmNvbnN0IHZpZXdEaXN0ID0gc2NyZWVuV2lkdGggLyAyIC8gTWF0aC50YW4oZm92SGFsZik7XG5jb25zdCB0d29QSSA9IE1hdGguUEkgKiAyO1xuY29uc3QgbnVtVGV4dHVyZXMgPSA0O1xubGV0IHZpc2libGVTcHJpdGVzID0gW107XG5sZXQgdGlja0NvdW50ID0gMDtcbmxldCBzcHJpdGVNYXAgPSBbXTtcbmxldCBtYXBJdGVtcyA9IFtdO1xubGV0IGl0ZW1UeXBlcyA9IFtdO1xubGV0IGVuZW15VHlwZXMgPSBbXTtcbmNvbnN0IGRlYnVnU2NyZWVuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNkZWJ1Z1NjcmVlblwiKTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gXCJtYWlubWVudVwiO1xuICAgICAgICB0aGlzLm1hcFdpZHRoID0gMDtcbiAgICAgICAgdGhpcy5tYXBIZWlnaHQgPSAwO1xuICAgICAgICB0aGlzLmRheVRpbWUgPSAwOyAvLyAwIC0gMjNcbiAgICAgICAgdGhpcy5kcmF3TWluaU1hcCA9ICgpID0+IHtcbiAgICAgICAgICAgIG1pbmlNYXAud2lkdGggPSB0aGlzLm1hcFdpZHRoICogbWluaU1hcFNjYWxlO1xuICAgICAgICAgICAgbWluaU1hcC5oZWlnaHQgPSB0aGlzLm1hcEhlaWdodCAqIG1pbmlNYXBTY2FsZTtcbiAgICAgICAgICAgIG1pbmlNYXAuc3R5bGUud2lkdGggPSBgJHt0aGlzLm1hcFdpZHRoICogbWluaU1hcFNjYWxlfXB4YDtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IG1pbmlNYXAuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLm1hcEhlaWdodDsgeSsrKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLm1hcFdpZHRoOyB4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGV2ZWwubWFwW3ldW3hdID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdCh4ICogbWluaU1hcFNjYWxlLCB5ICogbWluaU1hcFNjYWxlLCBtaW5pTWFwU2NhbGUsIG1pbmlNYXBTY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlTWluaU1hcCA9ICgpID0+IHtcbiAgICAgICAgICAgIG1pbmlNYXBPYmplY3RzLndpZHRoID0gdGhpcy5tYXBXaWR0aCAqIG1pbmlNYXBTY2FsZTtcbiAgICAgICAgICAgIG1pbmlNYXBPYmplY3RzLmhlaWdodCA9IHRoaXMubWFwSGVpZ2h0ICogbWluaU1hcFNjYWxlO1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gbWluaU1hcE9iamVjdHMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBtaW5pTWFwLndpZHRoLCBtaW5pTWFwLmhlaWdodCk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCJ5ZWxsb3dncmVlblwiO1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHRoaXMucGxheWVyLnBvcy54ICogbWluaU1hcFNjYWxlIC0gMiwgdGhpcy5wbGF5ZXIucG9zLnkgKiBtaW5pTWFwU2NhbGUgLSAyLCA0LCA0KTtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8odGhpcy5wbGF5ZXIucG9zLnggKiBtaW5pTWFwU2NhbGUsIHRoaXMucGxheWVyLnBvcy55ICogbWluaU1hcFNjYWxlKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oKHRoaXMucGxheWVyLnBvcy54ICsgTWF0aC5jb3ModGhpcy5wbGF5ZXIucm90YXRpb24pICogNCkgKiBtaW5pTWFwU2NhbGUsICh0aGlzLnBsYXllci5wb3MueSArIE1hdGguc2luKHRoaXMucGxheWVyLnJvdGF0aW9uKSAqIDQpICogbWluaU1hcFNjYWxlKTtcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wbGF5ZXIgPSBuZXcgUGxheWVyKFwicGxheWVyXCIpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBcIm1haW5tZW51XCI7XG4gICAgICAgIHRoaXMubGV2ZWwgPSBsZXZlbHNbMF07XG4gICAgICAgIHRoaXMuc2V0dXAoKTtcbiAgICB9XG4gICAgaW5pdFNwcml0ZXMoKSB7XG4gICAgICAgIHNwcml0ZU1hcCA9IFtdO1xuICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHRoaXMubGV2ZWwubWFwLmxlbmd0aDsgeSsrKSB7XG4gICAgICAgICAgICBzcHJpdGVNYXBbeV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hcEl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc3ByaXRlID0gbWFwSXRlbXNbaV07XG4gICAgICAgICAgICB2YXIgaXRlbVR5cGUgPSBpdGVtVHlwZXNbc3ByaXRlLnR5cGVdO1xuICAgICAgICAgICAgdmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gICAgICAgICAgICBpbWcuc3JjID0gaXRlbVR5cGUuaW1nO1xuICAgICAgICAgICAgaW1nLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIGltZy5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgICAgIHNwcml0ZS52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICBzcHJpdGUuYmxvY2sgPSBpdGVtVHlwZS5ibG9jaztcbiAgICAgICAgICAgIHNwcml0ZS5pbWcgPSBpbWc7XG4gICAgICAgICAgICBzcHJpdGVNYXBbc3ByaXRlLnldW3Nwcml0ZS54XSA9IHNwcml0ZTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2NyZWVuLmFwcGVuZENoaWxkKGltZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNCbG9ja2luZyh4LCB5KSB7XG4gICAgICAgIGlmICh5IDwgMCB8fCB5ID49IHRoaXMubWFwSGVpZ2h0IHx8IHggPCAwIHx8IHggPj0gdGhpcy5tYXBXaWR0aClcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB2YXIgaXggPSBNYXRoLmZsb29yKHgpO1xuICAgICAgICB2YXIgaXkgPSBNYXRoLmZsb29yKHkpO1xuICAgICAgICAvLyByZXR1cm4gdHJ1ZSBpZiB0aGUgbWFwIGJsb2NrIGlzIG5vdCAwLCBpZS4gaWYgdGhlcmUgaXMgYSBibG9ja2luZyB3YWxsLlxuICAgICAgICBpZiAodGhpcy5sZXZlbC5tYXBbaXldW2l4XSAhPSAwKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChzcHJpdGVNYXBbaXldW2l4XSAmJiBzcHJpdGVNYXBbaXldW2l4XS5ibG9jaylcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNoZWNrQ29sbGlzaW9uKGZyb21YLCBmcm9tWSwgdG9YLCB0b1ksIHJhZGl1cykge1xuICAgICAgICB2YXIgcG9zID0ge1xuICAgICAgICAgICAgeDogZnJvbVgsXG4gICAgICAgICAgICB5OiBmcm9tWSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRvWSA8IDAgfHwgdG9ZID49IHRoaXMubWFwSGVpZ2h0IHx8IHRvWCA8IDAgfHwgdG9YID49IHRoaXMubWFwV2lkdGgpXG4gICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICB2YXIgYmxvY2tYID0gTWF0aC5mbG9vcih0b1gpO1xuICAgICAgICB2YXIgYmxvY2tZID0gTWF0aC5mbG9vcih0b1kpO1xuICAgICAgICBpZiAodGhpcy5pc0Jsb2NraW5nKGJsb2NrWCwgYmxvY2tZKSkge1xuICAgICAgICAgICAgcmV0dXJuIHBvcztcbiAgICAgICAgfVxuICAgICAgICBwb3MueCA9IHRvWDtcbiAgICAgICAgcG9zLnkgPSB0b1k7XG4gICAgICAgIHZhciBibG9ja1RvcCA9IHRoaXMuaXNCbG9ja2luZyhibG9ja1gsIGJsb2NrWSAtIDEpO1xuICAgICAgICB2YXIgYmxvY2tCb3R0b20gPSB0aGlzLmlzQmxvY2tpbmcoYmxvY2tYLCBibG9ja1kgKyAxKTtcbiAgICAgICAgdmFyIGJsb2NrTGVmdCA9IHRoaXMuaXNCbG9ja2luZyhibG9ja1ggLSAxLCBibG9ja1kpO1xuICAgICAgICB2YXIgYmxvY2tSaWdodCA9IHRoaXMuaXNCbG9ja2luZyhibG9ja1ggKyAxLCBibG9ja1kpO1xuICAgICAgICBpZiAoYmxvY2tUb3AgJiYgdG9ZIC0gYmxvY2tZIDwgcmFkaXVzKSB7XG4gICAgICAgICAgICB0b1kgPSBwb3MueSA9IGJsb2NrWSArIHJhZGl1cztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmxvY2tCb3R0b20gJiYgYmxvY2tZICsgMSAtIHRvWSA8IHJhZGl1cykge1xuICAgICAgICAgICAgdG9ZID0gcG9zLnkgPSBibG9ja1kgKyAxIC0gcmFkaXVzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChibG9ja0xlZnQgJiYgdG9YIC0gYmxvY2tYIDwgcmFkaXVzKSB7XG4gICAgICAgICAgICB0b1ggPSBwb3MueCA9IGJsb2NrWCArIHJhZGl1cztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmxvY2tSaWdodCAmJiBibG9ja1ggKyAxIC0gdG9YIDwgcmFkaXVzKSB7XG4gICAgICAgICAgICB0b1ggPSBwb3MueCA9IGJsb2NrWCArIDEgLSByYWRpdXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaXMgdGlsZSB0byB0aGUgdG9wLWxlZnQgYSB3YWxsXG4gICAgICAgIGlmICh0aGlzLmlzQmxvY2tpbmcoYmxvY2tYIC0gMSwgYmxvY2tZIC0gMSkgJiYgIShibG9ja1RvcCAmJiBibG9ja0xlZnQpKSB7XG4gICAgICAgICAgICB2YXIgZHggPSB0b1ggLSBibG9ja1g7XG4gICAgICAgICAgICB2YXIgZHkgPSB0b1kgLSBibG9ja1k7XG4gICAgICAgICAgICBpZiAoZHggKiBkeCArIGR5ICogZHkgPCByYWRpdXMgKiByYWRpdXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZHggKiBkeCA+IGR5ICogZHkpXG4gICAgICAgICAgICAgICAgICAgIHRvWCA9IHBvcy54ID0gYmxvY2tYICsgcmFkaXVzO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdG9ZID0gcG9zLnkgPSBibG9ja1kgKyByYWRpdXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gaXMgdGlsZSB0byB0aGUgdG9wLXJpZ2h0IGEgd2FsbFxuICAgICAgICBpZiAodGhpcy5pc0Jsb2NraW5nKGJsb2NrWCArIDEsIGJsb2NrWSAtIDEpICYmICEoYmxvY2tUb3AgJiYgYmxvY2tSaWdodCkpIHtcbiAgICAgICAgICAgIHZhciBkeCA9IHRvWCAtIChibG9ja1ggKyAxKTtcbiAgICAgICAgICAgIHZhciBkeSA9IHRvWSAtIGJsb2NrWTtcbiAgICAgICAgICAgIGlmIChkeCAqIGR4ICsgZHkgKiBkeSA8IHJhZGl1cyAqIHJhZGl1cykge1xuICAgICAgICAgICAgICAgIGlmIChkeCAqIGR4ID4gZHkgKiBkeSlcbiAgICAgICAgICAgICAgICAgICAgdG9YID0gcG9zLnggPSBibG9ja1ggKyAxIC0gcmFkaXVzO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdG9ZID0gcG9zLnkgPSBibG9ja1kgKyByYWRpdXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gaXMgdGlsZSB0byB0aGUgYm90dG9tLWxlZnQgYSB3YWxsXG4gICAgICAgIGlmICh0aGlzLmlzQmxvY2tpbmcoYmxvY2tYIC0gMSwgYmxvY2tZICsgMSkgJiZcbiAgICAgICAgICAgICEoYmxvY2tCb3R0b20gJiYgYmxvY2tCb3R0b20pKSB7XG4gICAgICAgICAgICB2YXIgZHggPSB0b1ggLSBibG9ja1g7XG4gICAgICAgICAgICB2YXIgZHkgPSB0b1kgLSAoYmxvY2tZICsgMSk7XG4gICAgICAgICAgICBpZiAoZHggKiBkeCArIGR5ICogZHkgPCByYWRpdXMgKiByYWRpdXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZHggKiBkeCA+IGR5ICogZHkpXG4gICAgICAgICAgICAgICAgICAgIHRvWCA9IHBvcy54ID0gYmxvY2tYICsgcmFkaXVzO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdG9ZID0gcG9zLnkgPSBibG9ja1kgKyAxIC0gcmFkaXVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGlzIHRpbGUgdG8gdGhlIGJvdHRvbS1yaWdodCBhIHdhbGxcbiAgICAgICAgaWYgKHRoaXMuaXNCbG9ja2luZyhibG9ja1ggKyAxLCBibG9ja1kgKyAxKSAmJlxuICAgICAgICAgICAgIShibG9ja0JvdHRvbSAmJiBibG9ja1JpZ2h0KSkge1xuICAgICAgICAgICAgdmFyIGR4ID0gdG9YIC0gKGJsb2NrWCArIDEpO1xuICAgICAgICAgICAgdmFyIGR5ID0gdG9ZIC0gKGJsb2NrWSArIDEpO1xuICAgICAgICAgICAgaWYgKGR4ICogZHggKyBkeSAqIGR5IDwgcmFkaXVzICogcmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGR4ICogZHggPiBkeSAqIGR5KVxuICAgICAgICAgICAgICAgICAgICB0b1ggPSBwb3MueCA9IGJsb2NrWCArIDEgLSByYWRpdXM7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0b1kgPSBwb3MueSA9IGJsb2NrWSArIDEgLSByYWRpdXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBvcztcbiAgICB9XG4gICAgY2FzdFJheXMoKSB7XG4gICAgICAgIGxldCBzdHJpcElkeCA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtUmF5czsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCByYXlTY3JlZW5Qb3MgPSAoLW51bVJheXMgLyAyICsgaSkgKiBzdHJpcFdpZHRoO1xuICAgICAgICAgICAgY29uc3QgcmF5Vmlld0Rpc3QgPSBNYXRoLnNxcnQocmF5U2NyZWVuUG9zICogcmF5U2NyZWVuUG9zICsgdmlld0Rpc3QgKiB2aWV3RGlzdCk7XG4gICAgICAgICAgICBjb25zdCByYXlBbmdsZSA9IE1hdGguYXNpbihyYXlTY3JlZW5Qb3MgLyByYXlWaWV3RGlzdCk7XG4gICAgICAgICAgICB0aGlzLmNhc3RTaW5nbGVSYXkodGhpcy5wbGF5ZXIucm90YXRpb24gKyByYXlBbmdsZSwgc3RyaXBJZHgrKyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2FzdFNpbmdsZVJheShyYXlBbmdsZSwgc3RyaXBJZHgpIHtcbiAgICAgICAgLy8gaHR0cHM6Ly9kZXYub3BlcmEuY29tL2FydGljbGVzLzNkLWdhbWVzLXdpdGgtY2FudmFzLWFuZC1yYXljYXN0aW5nLXBhcnQtMi9cbiAgICAgICAgLy8gZmlyc3QgbWFrZSBzdXJlIHRoZSBhbmdsZSBpcyBiZXR3ZWVuIDAgYW5kIDM2MCBkZWdyZWVzXG4gICAgICAgIHJheUFuZ2xlICU9IHR3b1BJO1xuICAgICAgICBpZiAocmF5QW5nbGUgPCAwKSB7XG4gICAgICAgICAgICByYXlBbmdsZSArPSB0d29QSTtcbiAgICAgICAgfVxuICAgICAgICAvLyBtb3ZpbmcgcmlnaHQvbGVmdD8gdXAvZG93bj8gRGV0ZXJtaW5lZCBieSB3aGljaCBxdWFkcmFudCB0aGUgYW5nbGUgaXMgaW4uXG4gICAgICAgIHZhciByaWdodCA9IHJheUFuZ2xlID4gdHdvUEkgKiAwLjc1IHx8IHJheUFuZ2xlIDwgdHdvUEkgKiAwLjI1O1xuICAgICAgICB2YXIgdXAgPSByYXlBbmdsZSA8IDAgfHwgcmF5QW5nbGUgPiBNYXRoLlBJO1xuICAgICAgICB2YXIgd2FsbFR5cGUgPSAwO1xuICAgICAgICAvLyBvbmx5IGRvIHRoZXNlIG9uY2VcbiAgICAgICAgdmFyIGFuZ2xlU2luID0gTWF0aC5zaW4ocmF5QW5nbGUpO1xuICAgICAgICB2YXIgYW5nbGVDb3MgPSBNYXRoLmNvcyhyYXlBbmdsZSk7XG4gICAgICAgIHZhciBkaXN0ID0gMDsgLy8gdGhlIGRpc3RhbmNlIHRvIHRoZSBibG9jayB3ZSBoaXRcbiAgICAgICAgdmFyIHhIaXQgPSAwOyAvLyB0aGUgeCBhbmQgeSBjb29yZCBvZiB3aGVyZSB0aGUgcmF5IGhpdCB0aGUgYmxvY2tcbiAgICAgICAgdmFyIHlIaXQgPSAwO1xuICAgICAgICBsZXQgeFdhbGxIaXQgPSAwO1xuICAgICAgICBsZXQgeVdhbGxIaXQgPSAwO1xuICAgICAgICB2YXIgdGV4dHVyZVggPSAwOyAvLyB0aGUgeC1jb29yZCBvbiB0aGUgdGV4dHVyZSBvZiB0aGUgYmxvY2ssIGllLiB3aGF0IHBhcnQgb2YgdGhlIHRleHR1cmUgYXJlIHdlIGdvaW5nIHRvIHJlbmRlclxuICAgICAgICB2YXIgd2FsbFg7IC8vIHRoZSAoeCx5KSBtYXAgY29vcmRzIG9mIHRoZSBibG9ja1xuICAgICAgICB2YXIgd2FsbFk7XG4gICAgICAgIGxldCB3YWxsSXNTaGFkZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHdhbGxJc0hvcml6b250YWwgPSBmYWxzZTtcbiAgICAgICAgLy8gZmlyc3QgY2hlY2sgYWdhaW5zdCB0aGUgdmVydGljYWwgbWFwL3dhbGwgbGluZXNcbiAgICAgICAgLy8gd2UgZG8gdGhpcyBieSBtb3ZpbmcgdG8gdGhlIHJpZ2h0IG9yIGxlZnQgZWRnZSBvZiB0aGUgYmxvY2sgd2UncmUgc3RhbmRpbmcgaW5cbiAgICAgICAgLy8gYW5kIHRoZW4gbW92aW5nIGluIDEgbWFwIHVuaXQgc3RlcHMgaG9yaXpvbnRhbGx5LiBUaGUgYW1vdW50IHdlIGhhdmUgdG8gbW92ZSB2ZXJ0aWNhbGx5XG4gICAgICAgIC8vIGlzIGRldGVybWluZWQgYnkgdGhlIHNsb3BlIG9mIHRoZSByYXksIHdoaWNoIGlzIHNpbXBseSBkZWZpbmVkIGFzIHNpbihhbmdsZSkgLyBjb3MoYW5nbGUpLlxuICAgICAgICB2YXIgc2xvcGUgPSBhbmdsZVNpbiAvIGFuZ2xlQ29zOyAvLyB0aGUgc2xvcGUgb2YgdGhlIHN0cmFpZ2h0IGxpbmUgbWFkZSBieSB0aGUgcmF5XG4gICAgICAgIHZhciBkWFZlciA9IHJpZ2h0ID8gMSA6IC0xOyAvLyB3ZSBtb3ZlIGVpdGhlciAxIG1hcCB1bml0IHRvIHRoZSBsZWZ0IG9yIHJpZ2h0XG4gICAgICAgIHZhciBkWVZlciA9IGRYVmVyICogc2xvcGU7IC8vIGhvdyBtdWNoIHRvIG1vdmUgdXAgb3IgZG93blxuICAgICAgICB2YXIgeCA9IHJpZ2h0XG4gICAgICAgICAgICA/IE1hdGguY2VpbCh0aGlzLnBsYXllci5wb3MueClcbiAgICAgICAgICAgIDogTWF0aC5mbG9vcih0aGlzLnBsYXllci5wb3MueCk7IC8vIHN0YXJ0aW5nIGhvcml6b250YWwgcG9zaXRpb24sIGF0IG9uZSBvZiB0aGUgZWRnZXMgb2YgdGhlIGN1cnJlbnQgbWFwIGJsb2NrXG4gICAgICAgIHZhciB5ID0gdGhpcy5wbGF5ZXIucG9zLnkgKyAoeCAtIHRoaXMucGxheWVyLnBvcy54KSAqIHNsb3BlOyAvLyBzdGFydGluZyB2ZXJ0aWNhbCBwb3NpdGlvbi4gV2UgYWRkIHRoZSBzbWFsbCBob3Jpem9udGFsIHN0ZXAgd2UganVzdCBtYWRlLCBtdWx0aXBsaWVkIGJ5IHRoZSBzbG9wZS5cbiAgICAgICAgd2hpbGUgKHggPj0gMCAmJiB4IDwgdGhpcy5tYXBXaWR0aCAmJiB5ID49IDAgJiYgeSA8IHRoaXMubWFwSGVpZ2h0KSB7XG4gICAgICAgICAgICB2YXIgd2FsbFggPSB4ICsgKHJpZ2h0ID8gMCA6IC0xKTtcbiAgICAgICAgICAgIHZhciB3YWxsWSA9IHkgPj4gMDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHNwcml0ZU1hcFt3YWxsWV1bd2FsbFhdICYmICFzcHJpdGVNYXBbd2FsbFldW3dhbGxYXS52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZU1hcFt3YWxsWV1bd2FsbFhdLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlU3ByaXRlcy5wdXNoKHNwcml0ZU1hcFt3YWxsWV1bd2FsbFhdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgICAgICAgICAvLyBpcyB0aGlzIHBvaW50IGluc2lkZSBhIHdhbGwgYmxvY2s/XG4gICAgICAgICAgICBpZiAodGhpcy5sZXZlbC5tYXBbd2FsbFldW3dhbGxYXSA+IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgZGlzdFggPSB4IC0gdGhpcy5wbGF5ZXIucG9zLng7XG4gICAgICAgICAgICAgICAgbGV0IGRpc3RZID0geSAtIHRoaXMucGxheWVyLnBvcy55O1xuICAgICAgICAgICAgICAgIGRpc3QgPSBkaXN0WCAqIGRpc3RYICsgZGlzdFkgKiBkaXN0WTsgLy8gdGhlIGRpc3RhbmNlIGZyb20gdGhlIHBsYXllciB0byB0aGlzIHBvaW50LCBzcXVhcmVkLlxuICAgICAgICAgICAgICAgIHdhbGxUeXBlID0gdGhpcy5sZXZlbC5tYXBbd2FsbFldW3dhbGxYXTsgLy8gd2UnbGwgcmVtZW1iZXIgdGhlIHR5cGUgb2Ygd2FsbCB3ZSBoaXQgZm9yIGxhdGVyXG4gICAgICAgICAgICAgICAgdGV4dHVyZVggPSB5ICUgMTsgLy8gd2hlcmUgZXhhY3RseSBhcmUgd2Ugb24gdGhlIHdhbGw/IHRleHR1cmVYIGlzIHRoZSB4IGNvb3JkaW5hdGUgb24gdGhlIHRleHR1cmUgdGhhdCB3ZSdsbCB1c2UgbGF0ZXIgd2hlbiB0ZXh0dXJpbmcgdGhlIHdhbGwuXG4gICAgICAgICAgICAgICAgaWYgKCFyaWdodCkge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlWCA9IDEgLSB0ZXh0dXJlWDtcbiAgICAgICAgICAgICAgICB9IC8vIGlmIHdlJ3JlIGxvb2tpbmcgdG8gdGhlIGxlZnQgc2lkZSBvZiB0aGUgbWFwLCB0aGUgdGV4dHVyZSBzaG91bGQgYmUgcmV2ZXJzZWRcbiAgICAgICAgICAgICAgICB4SGl0ID0geDsgLy8gc2F2ZSB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIGhpdC4gV2Ugb25seSByZWFsbHkgdXNlIHRoZXNlIHRvIGRyYXcgdGhlIHJheXMgb24gbWluaW1hcC5cbiAgICAgICAgICAgICAgICB5SGl0ID0geTtcbiAgICAgICAgICAgICAgICB4V2FsbEhpdCA9IHdhbGxYO1xuICAgICAgICAgICAgICAgIHlXYWxsSGl0ID0gd2FsbFk7XG4gICAgICAgICAgICAgICAgd2FsbElzSG9yaXpvbnRhbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB4ICs9IGRYVmVyO1xuICAgICAgICAgICAgeSArPSBkWVZlcjtcbiAgICAgICAgfVxuICAgICAgICAvLyBub3cgY2hlY2sgYWdhaW5zdCBob3Jpem9udGFsIGxpbmVzLiBJdCdzIGJhc2ljYWxseSB0aGUgc2FtZSwganVzdCBcInR1cm5lZCBhcm91bmRcIi5cbiAgICAgICAgLy8gdGhlIG9ubHkgZGlmZmVyZW5jZSBoZXJlIGlzIHRoYXQgb25jZSB3ZSBoaXQgYSBtYXAgYmxvY2ssXG4gICAgICAgIC8vIHdlIGNoZWNrIGlmIHRoZXJlIHdlIGFsc28gZm91bmQgb25lIGluIHRoZSBlYXJsaWVyLCB2ZXJ0aWNhbCBydW4uIFdlJ2xsIGtub3cgdGhhdCBpZiBkaXN0ICE9IDAuXG4gICAgICAgIC8vIElmIHNvLCB3ZSBvbmx5IHJlZ2lzdGVyIHRoaXMgaGl0IGlmIHRoaXMgZGlzdGFuY2UgaXMgc21hbGxlci5cbiAgICAgICAgdmFyIHNsb3BlID0gYW5nbGVDb3MgLyBhbmdsZVNpbjtcbiAgICAgICAgdmFyIGRZSG9yID0gdXAgPyAtMSA6IDE7XG4gICAgICAgIHZhciBkWEhvciA9IGRZSG9yICogc2xvcGU7XG4gICAgICAgIHZhciB5ID0gdXAgPyBNYXRoLmZsb29yKHRoaXMucGxheWVyLnBvcy55KSA6IE1hdGguY2VpbCh0aGlzLnBsYXllci5wb3MueSk7XG4gICAgICAgIHZhciB4ID0gdGhpcy5wbGF5ZXIucG9zLnggKyAoeSAtIHRoaXMucGxheWVyLnBvcy55KSAqIHNsb3BlO1xuICAgICAgICB3aGlsZSAoeCA+PSAwICYmIHggPCB0aGlzLm1hcFdpZHRoICYmIHkgPj0gMCAmJiB5IDwgdGhpcy5tYXBIZWlnaHQpIHtcbiAgICAgICAgICAgIHZhciB3YWxsWSA9IE1hdGguZmxvb3IoeSArICh1cCA/IC0xIDogMCkpO1xuICAgICAgICAgICAgdmFyIHdhbGxYID0geCA+PiAwO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoc3ByaXRlTWFwW3dhbGxZXVt3YWxsWF0gJiYgIXNwcml0ZU1hcFt3YWxsWV1bd2FsbFhdLnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ByaXRlTWFwW3dhbGxZXVt3YWxsWF0udmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHZpc2libGVTcHJpdGVzLnB1c2goc3ByaXRlTWFwW3dhbGxZXVt3YWxsWF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICAgICAgICAgIGlmICh0aGlzLmxldmVsLm1hcFt3YWxsWV1bd2FsbFhdID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciBkaXN0WCA9IHggLSB0aGlzLnBsYXllci5wb3MueDtcbiAgICAgICAgICAgICAgICB2YXIgZGlzdFkgPSB5IC0gdGhpcy5wbGF5ZXIucG9zLnk7XG4gICAgICAgICAgICAgICAgdmFyIGJsb2NrRGlzdCA9IGRpc3RYICogZGlzdFggKyBkaXN0WSAqIGRpc3RZO1xuICAgICAgICAgICAgICAgIGlmICghZGlzdCB8fCBibG9ja0Rpc3QgPCBkaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3QgPSBibG9ja0Rpc3Q7XG4gICAgICAgICAgICAgICAgICAgIHhIaXQgPSB4O1xuICAgICAgICAgICAgICAgICAgICB5SGl0ID0geTtcbiAgICAgICAgICAgICAgICAgICAgeVdhbGxIaXQgPSB3YWxsWTtcbiAgICAgICAgICAgICAgICAgICAgeFdhbGxIaXQgPSB3YWxsWDtcbiAgICAgICAgICAgICAgICAgICAgd2FsbFR5cGUgPSB0aGlzLmxldmVsLm1hcFt3YWxsWV1bd2FsbFhdO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlWCA9IHggJSAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAodXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmVYID0gMSAtIHRleHR1cmVYO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeCArPSBkWEhvcjtcbiAgICAgICAgICAgIHkgKz0gZFlIb3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpc3QpIHtcbiAgICAgICAgICAgIHZhciBzdHJpcCA9IHRoaXMucmVuZGVyZXIuc2NyZWVuU3RyaXBzW3N0cmlwSWR4XTtcbiAgICAgICAgICAgIGRpc3QgPSBNYXRoLnNxcnQoZGlzdCk7XG4gICAgICAgICAgICAvLyB1c2UgcGVycGVuZGljdWxhciBkaXN0YW5jZSB0byBhZGp1c3QgZm9yIGZpc2ggZXllXG4gICAgICAgICAgICAvLyBkaXN0b3J0ZWRfZGlzdCA9IGNvcnJlY3RfZGlzdCAvIGNvcyhyZWxhdGl2ZV9hbmdsZV9vZl9yYXkpXG4gICAgICAgICAgICBkaXN0ID0gZGlzdCAqIE1hdGguY29zKHRoaXMucGxheWVyLnJvdGF0aW9uIC0gcmF5QW5nbGUpO1xuICAgICAgICAgICAgLy8gbm93IGNhbGMgdGhlIHBvc2l0aW9uLCBoZWlnaHQgYW5kIHdpZHRoIG9mIHRoZSB3YWxsIHN0cmlwXG4gICAgICAgICAgICAvLyBcInJlYWxcIiB3YWxsIGhlaWdodCBpbiB0aGUgZ2FtZSB3b3JsZCBpcyAxIHVuaXQsIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSBwbGF5ZXIgdG8gdGhlIHNjcmVlbiBpcyB2aWV3RGlzdCxcbiAgICAgICAgICAgIC8vIHRodXMgdGhlIGhlaWdodCBvbiB0aGUgc2NyZWVuIGlzIGVxdWFsIHRvIHdhbGxfaGVpZ2h0X3JlYWwgKiB2aWV3RGlzdCAvIGRpc3RcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gTWF0aC5yb3VuZCh2aWV3RGlzdCAvIGRpc3QpO1xuICAgICAgICAgICAgLy8gd2lkdGggaXMgdGhlIHNhbWUsIGJ1dCB3ZSBoYXZlIHRvIHN0cmV0Y2ggdGhlIHRleHR1cmUgdG8gYSBmYWN0b3Igb2Ygc3RyaXBXaWR0aCB0byBtYWtlIGl0IGZpbGwgdGhlIHN0cmlwIGNvcnJlY3RseVxuICAgICAgICAgICAgdmFyIHdpZHRoID0gaGVpZ2h0ICogc3RyaXBXaWR0aDtcbiAgICAgICAgICAgIC8vIHRvcCBwbGFjZW1lbnQgaXMgZWFzeSBzaW5jZSBldmVyeXRoaW5nIGlzIGNlbnRlcmVkIG9uIHRoZSB4LWF4aXMsIHNvIHdlIHNpbXBseSBtb3ZlXG4gICAgICAgICAgICAvLyBpdCBoYWxmIHdheSBkb3duIHRoZSBzY3JlZW4gYW5kIHRoZW4gaGFsZiB0aGUgd2FsbCBoZWlnaHQgYmFjayB1cC5cbiAgICAgICAgICAgIHZhciB0b3AgPSBNYXRoLnJvdW5kKChzY3JlZW5IZWlnaHQgLSBoZWlnaHQpIC8gMik7XG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIGxldCBzdHlsZUhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgIHN0cmlwLnN0eWxlLmhlaWdodCA9IHN0eWxlSGVpZ2h0ICsgXCJweFwiO1xuICAgICAgICAgICAgc3RyaXAuc3R5bGUudG9wID0gdG9wICsgXCJweFwiO1xuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICBzdHJpcC5pbWcuc3R5bGUuaGVpZ2h0ID0gTWF0aC5mbG9vcihoZWlnaHQgKiBudW1UZXh0dXJlcykgKyBcInB4XCI7XG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIHN0cmlwLmltZy5zdHlsZS53aWR0aCA9IE1hdGguZmxvb3Iod2lkdGggKiAyKSArIFwicHhcIjtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgc3RyaXAuaW1nLnN0eWxlLnRvcCA9IC1NYXRoLmZsb29yKGhlaWdodCAqICh3YWxsVHlwZSAtIDEpKSArIFwicHhcIjtcbiAgICAgICAgICAgIHZhciB0ZXhYID0gTWF0aC5yb3VuZCh0ZXh0dXJlWCAqIHdpZHRoKTtcbiAgICAgICAgICAgIGlmICh0ZXhYID4gd2lkdGggLSBzdHJpcFdpZHRoKVxuICAgICAgICAgICAgICAgIHRleFggPSB3aWR0aCAtIHN0cmlwV2lkdGg7XG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIHN0cmlwLmltZy5zdHlsZS5sZWZ0ID0gLXRleFggKyBcInB4XCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYmluZEtleXMoKSB7XG4gICAgICAgIGNvbnN0IGhhbmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2hhbmRcIik7XG4gICAgICAgIC8vIGNoYW5nZSBwbGF5ZXIgZGlyZWN0aW9uIGJ5IG1vdXNlXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHggPSBlLmNsaWVudFggLSAod2luZG93LmlubmVyV2lkdGggLyAyKSAqIHRoaXMucGxheWVyLnJvdGF0aW9uU3BlZWQ7XG4gICAgICAgICAgICB0aGlzLnBsYXllci5yb3RhdGlvbiA9ICh4IC8gc2NyZWVuV2lkdGgpICogMiAqIE1hdGguUEk7XG4gICAgICAgIH0pO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCAoZSkgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChlLmNvZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiS2V5V1wiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5zcGVlZCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLmRpcmVjdGlvbi55ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIGhhbmQuc3R5bGUuYW5pbWF0aW9uID0gXCJ3YWxrIDEuNXMgaW5maW5pdGVcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIktleVNcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuc3BlZWQgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuZGlyZWN0aW9uLnkgPSAxO1xuICAgICAgICAgICAgICAgICAgICBoYW5kLnN0eWxlLmFuaW1hdGlvbiA9IFwid2FsayAxLjVzIGluZmluaXRlXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJLZXlBXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLmRpcmVjdGlvbi54ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuc3BlZWQgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIktleURcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuZGlyZWN0aW9uLnggPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuc3BlZWQgPSAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiU2hpZnRMZWZ0XCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLnNwZWVkICo9IDI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIChlKSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGUuY29kZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJLZXlXXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIktleVNcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuc3BlZWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5kaXJlY3Rpb24ueSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGhhbmQuc3R5bGUuYW5pbWF0aW9uID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIktleUFcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiS2V5RFwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5zcGVlZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLmRpcmVjdGlvbi54ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaGFuZC5zdHlsZS5hbmltYXRpb24gPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiU2hpZnRMZWZ0XCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLnNwZWVkIC89IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZXR1cCgpIHtcbiAgICAgICAgdGhpcy5tYXBXaWR0aCA9IHRoaXMubGV2ZWwubWFwWzBdLmxlbmd0aDtcbiAgICAgICAgdGhpcy5tYXBIZWlnaHQgPSB0aGlzLmxldmVsLm1hcC5sZW5ndGg7XG4gICAgICAgIHRoaXMuaW5pdFNwcml0ZXMoKTtcbiAgICAgICAgdGhpcy5iaW5kS2V5cygpO1xuICAgICAgICB0aGlzLmRyYXdNaW5pTWFwKCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuaW1hZ2VSZW5kZXJpbmcgPSBcInBpeGVsYXRlZFwiO1xuICAgICAgICB0aGlzLmxvb3AoMCk7XG4gICAgfVxuICAgIG1vdmVQbGF5ZXIoZW50aXR5LCBkdCkge1xuICAgICAgICBjb25zdCBtb3ZlU3RlcCA9IHRoaXMucGxheWVyLm1vdmVTcGVlZCAqIHRoaXMucGxheWVyLnNwZWVkO1xuICAgICAgICAvLyBwbGF5ZXIgbXVzdCByb3RhdGUgYW5kIG1vdmUgb24gZWFjaCBzaWRlXG4gICAgICAgIGxldCBuZXdYID0gdGhpcy5wbGF5ZXIucG9zLnggKyBNYXRoLmNvcyh0aGlzLnBsYXllci5yb3RhdGlvbikgKiBtb3ZlU3RlcDtcbiAgICAgICAgbGV0IG5ld1kgPSB0aGlzLnBsYXllci5wb3MueSArIE1hdGguc2luKHRoaXMucGxheWVyLnJvdGF0aW9uKSAqIG1vdmVTdGVwO1xuICAgICAgICBpZiAodGhpcy5wbGF5ZXIuZGlyZWN0aW9uLnggIT09IDApIHtcbiAgICAgICAgICAgIG5ld1ggPVxuICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLnBvcy54ICtcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5jb3ModGhpcy5wbGF5ZXIucm90YXRpb24gKyBNYXRoLlBJIC8gMikgKiBtb3ZlU3RlcDtcbiAgICAgICAgICAgIG5ld1kgPVxuICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLnBvcy55ICtcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5zaW4odGhpcy5wbGF5ZXIucm90YXRpb24gKyBNYXRoLlBJIC8gMikgKiBtb3ZlU3RlcDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwb3MgPSB0aGlzLmNoZWNrQ29sbGlzaW9uKHRoaXMucGxheWVyLnBvcy54LCB0aGlzLnBsYXllci5wb3MueSwgbmV3WCwgbmV3WSwgMC4zNSk7XG4gICAgICAgIHRoaXMucGxheWVyLnBvcy54ID0gcG9zLng7XG4gICAgICAgIHRoaXMucGxheWVyLnBvcy55ID0gcG9zLnk7XG4gICAgICAgIGlmICh0aGlzLnBsYXllci5yb3RhdGlvbiA8IDApXG4gICAgICAgICAgICB0aGlzLnBsYXllci5yb3RhdGlvbiArPSBNYXRoLlBJICogMjtcbiAgICAgICAgaWYgKHRoaXMucGxheWVyLnJvdGF0aW9uID49IE1hdGguUEkgKiAyKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXllci5yb3RhdGlvbiAtPSBNYXRoLlBJICogMjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLmRheVRpbWUgPCAxMikge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5za3lib3guc3R5bGUuYmFja2dyb3VuZENvbG9yID0gYHJnYmEoJHs5OSAvICgxMiAvIHRoaXMuZGF5VGltZSl9LCBcbiAgICAkezE1NSAvICgxMiAvIHRoaXMuZGF5VGltZSl9LFxuICAgICR7MjU1IC8gKDEyIC8gdGhpcy5kYXlUaW1lKX1cbiAgICAsIDEpYDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2t5Ym94LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGByZ2JhKCR7OTkgLyAoMTIgLyAoMjQgLSB0aGlzLmRheVRpbWUpKX0sIFxuICAgICAgJHsxNTUgLyAoMTIgLyAoMjQgLSB0aGlzLmRheVRpbWUpKX0sXG4gICAgICAkezI1NSAvICgxMiAvICgyNCAtIHRoaXMuZGF5VGltZSkpfVxuICAgICAgLCAxKWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlKGR0KSB7XG4gICAgICAgIHRoaXMubW92ZVBsYXllcihudWxsLCBkdCk7XG4gICAgICAgIHRoaXMudXBkYXRlTWluaU1hcCgpO1xuICAgICAgICB0aGlzLmNhc3RSYXlzKCk7XG4gICAgICAgIHRpY2tDb3VudCArPSAtZHQ7XG4gICAgICAgIGlmICh0aWNrQ291bnQgPiAxMDApIHtcbiAgICAgICAgICAgIHRoaXMuZGF5VGltZSArPSAwLjAxO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGF5VGltZSA+IDIzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXlUaW1lID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRpY2tDb3VudCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZGVidWdTY3JlZW4uaW5uZXJUZXh0ID0gYFxuICAgICAgUExBWUVSIFg6ICR7dGhpcy5wbGF5ZXIucG9zLnh9XG4gICAgICBQTEFZRVIgWTogJHt0aGlzLnBsYXllci5wb3MueX1cbiAgICAgIFBMQVlFUiBBTkdMRTogJHt0aGlzLnBsYXllci5yb3RhdGlvbn1cbiAgICAgIERUOiAke2R0fVxuICAgIGA7XG4gICAgfVxuICAgIGxvb3AodHMpIHtcbiAgICAgICAgY29uc3QgZHQgPSBsYXN0VGltZSAtIHRzO1xuICAgICAgICBsYXN0VGltZSA9IHRzO1xuICAgICAgICB0aGlzLnVwZGF0ZShkdCk7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmxvb3AuYmluZCh0aGlzKSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IEdhbWUgZnJvbSBcIi4vZ2FtZVwiO1xuY29uc3QgZ2FtZSA9IG5ldyBHYW1lKCk7XG4vL0B0cy1pZ25vcmVcbndpbmRvdy5nYW1lID0gZ2FtZTtcbmdhbWUuc2V0dXAoKTtcbiJdLCJuYW1lcyI6WyJQZXJzb24iLCJjb25zdHJ1Y3RvciIsImlkIiwidGhpcyIsInBvcyIsIngiLCJ5Iiwic3BlZWQiLCJtb3ZlU3BlZWQiLCJyb3RhdGlvbiIsImRpcmVjdGlvbiIsInJvdGF0aW9uU3BlZWQiLCJQbGF5ZXIiLCJzdXBlciIsImlzU3RyYWZpbmciLCJNYXRoIiwiUEkiLCJIVUQiLCJ3aWR0aCIsImhlaWdodCIsIl9jYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsIl9jdHgiLCJnZXRDb250ZXh0IiwicmVuZGVyQ3Jvc3NoYWlyIiwiY2FudmFzIiwiY3R4IiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlU3R5bGUiLCJzdHJva2UiLCJSZW5kZXJlciIsInN0cmlwV2lkdGgiLCJzY3JlZW5TdHJpcHMiLCJzY3JlZW4iLCJza3lib3giLCJib2R5IiwicHJlcGVuZCIsImluaXQiLCJjdXJzb3IiLCJodWQiLCJmbG9vciIsImxldmVsIiwiaGFuZCIsImFwcGVuZENoaWxkIiwiaSIsInN0cmlwIiwib3ZlcmZsb3ciLCJiYWNrZ3JvdW5kQ29sb3IiLCJpbWciLCJJbWFnZSIsInNyYyIsInB1c2giLCJkcmF3UmF5IiwiY2FzdFNpbmdsZVJheSIsImRyYXdNaW5pTWFwIiwidXBkYXRlTWluaU1hcCIsIkdhbWVTdGF0ZSIsIm1pbmlNYXAiLCJxdWVyeVNlbGVjdG9yIiwibWluaU1hcE9iamVjdHMiLCJsYXN0VGltZSIsImZvdkhhbGYiLCJudW1SYXlzIiwiY2VpbCIsInNjcmVlbldpZHRoIiwidmlld0Rpc3QiLCJ0YW4iLCJ0d29QSSIsInZpc2libGVTcHJpdGVzIiwidGlja0NvdW50Iiwic3ByaXRlTWFwIiwibWFwSXRlbXMiLCJpdGVtVHlwZXMiLCJkZWJ1Z1NjcmVlbiIsImdhbWUiLCJzdGF0ZSIsIm1hcFdpZHRoIiwibWFwSGVpZ2h0IiwiZGF5VGltZSIsIm1hcCIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiY2xlYXJSZWN0IiwicGxheWVyIiwiY29zIiwic2luIiwiY2xvc2VQYXRoIiwicmVuZGVyZXIiLCJzZXR1cCIsImluaXRTcHJpdGVzIiwibGVuZ3RoIiwic3ByaXRlIiwiaXRlbVR5cGUiLCJ0eXBlIiwiZGlzcGxheSIsInZpc2libGUiLCJibG9jayIsImlzQmxvY2tpbmciLCJpeCIsIml5IiwiY2hlY2tDb2xsaXNpb24iLCJmcm9tWCIsImZyb21ZIiwidG9YIiwidG9ZIiwicmFkaXVzIiwiYmxvY2tYIiwiYmxvY2tZIiwiZHgiLCJkeSIsImJsb2NrVG9wIiwiYmxvY2tCb3R0b20iLCJibG9ja0xlZnQiLCJibG9ja1JpZ2h0IiwiY2FzdFJheXMiLCJzdHJpcElkeCIsInJheVNjcmVlblBvcyIsInJheVZpZXdEaXN0Iiwic3FydCIsInJheUFuZ2xlIiwiYXNpbiIsInJpZ2h0IiwidXAiLCJ3YWxsVHlwZSIsImFuZ2xlU2luIiwiYW5nbGVDb3MiLCJkaXN0IiwieFdhbGxIaXQiLCJ5V2FsbEhpdCIsInRleHR1cmVYIiwiZFhWZXIiLCJkWVZlciIsInNsb3BlIiwid2FsbFgiLCJ3YWxsWSIsImUiLCJkaXN0WCIsImRpc3RZIiwiZFlIb3IiLCJkWEhvciIsImJsb2NrRGlzdCIsInJvdW5kIiwic3R5bGVIZWlnaHQiLCJ0ZXhYIiwiYmluZEtleXMiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xpZW50WCIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJjb2RlIiwiYW5pbWF0aW9uIiwiaW1hZ2VSZW5kZXJpbmciLCJsb29wIiwibW92ZVBsYXllciIsImVudGl0eSIsImR0IiwibW92ZVN0ZXAiLCJuZXdYIiwibmV3WSIsInJlbmRlciIsInVwZGF0ZSIsImlubmVyVGV4dCIsInRzIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiYmluZCJdLCJzb3VyY2VSb290IjoiIn0=